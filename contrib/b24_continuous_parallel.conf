;================================================================================
; ПАРАЛЛЕЛЬНАЯ НЕПРЕРЫВНАЯ ЗАПИСЬ ЗВОНКОВ В WAV (с автоконвертацией в MP3)
; Версия: 1.4 - Добавлена передача Linkedid в CallMe
; Автор: Адаптация для callme_v2
;
; НАЗНАЧЕНИЕ:
; Создает ВТОРУЮ (параллельную) запись звонков в отдельной папке.
; Основные записи (текущие) остаются без изменений.
; Новые записи - непрерывные (один файл на весь звонок, даже при Transfer).
; Записываются в WAV, затем АВТОМАТИЧЕСКИ конвертируются в MP3 после завершения.
; НОВОЕ v1.4: Передает Linkedid в приложение CallMe через переменную CallMeLINKEDID.
;
; УСТАНОВКА:
; 1. Скопировать этот файл в: /etc/asterisk/
; 2. Добавить в /etc/asterisk/extensions_custom.conf строку:
;    #include b24_continuous_parallel.conf
; 3. Выполнить: asterisk -rx "dialplan reload"
;
; РЕЗУЛЬТАТ:
; Текущие записи: /var/spool/asterisk/monitor/YYYY/MM/DD/*.wav (как было)
; Новые записи:   /var/spool/asterisk/continuous/YYYY/MM/DD/call-linkedid.wav → .mp3
; Конвертация:    АВТОМАТИЧЕСКИ после завершения звонка (WAV → MP3, WAV удаляется)
; CallMe:         Получает Linkedid каждого канала через VarSetEvent
;
;================================================================================

;--------------------------------------------------------------------------------
; ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ
;--------------------------------------------------------------------------------
[globals](+)
; Папка для непрерывных записей
B24_CONTINUOUS_DIR = /var/spool/asterisk/continuous/

; Префикс имени файла
B24_CONTINUOUS_PREFIX = call

; Формат (wav, конвертируется в mp3 через cron)
B24_CONTINUOUS_FORMAT = wav

;--------------------------------------------------------------------------------
; ОСНОВНОЙ HOOK - Запуск параллельной записи
;--------------------------------------------------------------------------------
[sub-record-check-custom]
; Этот контекст вызывается ИЗ sub-record-check после установки CALLFILENAME
; но ПЕРЕД запуском основного MixMonitor

exten => s,1,Noop(=== B24 Continuous Recording WAV Hook ===)

; ╔═══════════════════════════════════════════════════════════════════╗
; ║  ПЕРЕДАЧА LINKEDID В CALLME (для отслеживания звонков)             ║
; ╚═══════════════════════════════════════════════════════════════════╝
; ВАЖНО: Устанавливаем ВСЕГДА (независимо от политики записи)
; Это позволяет CallMe отслеживать все каналы одного звонка:
; - Входящие/исходящие
; - Originate-вызовы через Bitrix24
; - Трансферы (все каналы имеют одинаковый linkedid)
; - Парковку вызовов
exten => s,n,Set(CallMeLINKEDID=${CHANNEL(linkedid)})

; Проверяем что запись вообще должна идти
exten => s,n,GotoIf($["${REC_POLICY_MODE}"!="always"]?exit)

; Создаем имя файла на основе linkedid (КЛЮЧЕВОЕ!)
exten => s,n,Set(__B24_CONT_FILENAME=${B24_CONTINUOUS_PREFIX}-${CHANNEL(linkedid)})

; Создаем базовый путь (без расширения)
exten => s,n,Set(__B24_CONT_BASEPATH=${B24_CONTINUOUS_DIR}${YEAR}/${MONTH}/${DAY}/${B24_CONT_FILENAME})

; Создаем полный путь с расширением .wav
exten => s,n,Set(__B24_CONT_FULLPATH=${B24_CONT_BASEPATH}.${B24_CONTINUOUS_FORMAT})

; Устанавливаем переменную для CallMe (будет видна в AMI VarSetEvent)
; Путь относительный: YYYY/MM/DD/call-XXXXX.mp3
exten => s,n,Set(CallMeFULLFNAME=${YEAR}/${MONTH}/${DAY}/${B24_CONT_FILENAME}.mp3)

; Проверяем что это первый канал (чтобы не запускать MixMonitor дважды на одном linkedid)
exten => s,n,GotoIf($["${SHARED(B24_CONT_STARTED,${CHANNEL(linkedid)})}"="YES"]?inherit_only:start_new)

;--------------------------------------------------------------------------------
; Запуск НОВОГО MixMonitor (первый канал звонка)
;--------------------------------------------------------------------------------
exten => s,n(start_new),Noop(Starting NEW continuous WAV recording: ${B24_CONT_FULLPATH})

; ╔═══════════════════════════════════════════════════════════════════╗
; ║  КЛЮЧЕВЫЕ НАСТРОЙКИ                                                ║
; ╚═══════════════════════════════════════════════════════════════════╝

; 1. Включаем наследование (чтобы запись продолжалась при Transfer)
exten => s,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)

; 2. Запускаем ВТОРОЙ MixMonitor (параллельно с основным!)
;    С АВТОКОНВЕРТАЦИЕЙ после завершения записи
exten => s,n,MixMonitor(${B24_CONT_FULLPATH},ai(B24_MIXMON_ID),/bin/sh -c '/usr/bin/lame -b 64 "${B24_CONT_FULLPATH}" "${B24_CONT_BASEPATH}.mp3" && /bin/rm "${B24_CONT_FULLPATH}" || /bin/echo "Error converting ${B24_CONT_FULLPATH}" >> /var/log/wav2mp3.log')
;                                            ^                  ^
;                                            |                  |
;                                            |                  +-- КОМАНДА конвертации (выполняется ПОСЛЕ завершения)
;                                            +-- ОПЦИИ: a=append, i(var)=ID в переменную

; 3. Помечаем что запись для этого linkedid уже запущена
exten => s,n,Set(SHARED(B24_CONT_STARTED,${CHANNEL(linkedid)})=YES)

; 4. Сохраняем имя файла
exten => s,n,Set(__B24_CONT_FILE=${B24_CONT_FILENAME}.${B24_CONTINUOUS_FORMAT})
exten => s,n,Set(SHARED(B24_CONT_FILE,${CHANNEL(linkedid)})=${B24_CONT_FILE})

exten => s,n,Goto(exit)

;--------------------------------------------------------------------------------
; Наследование существующего MixMonitor (последующие каналы)
;--------------------------------------------------------------------------------
exten => s,n(inherit_only),Noop(Continuous recording already started for linkedid: ${CHANNEL(linkedid)})

; MixMonitor УЖЕ работает (благодаря AUDIOHOOK_INHERIT=yes)
; Просто убеждаемся что INHERIT включен на этом канале тоже
exten => s,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)

; Восстанавливаем имя файла из SHARED
exten => s,n,Set(__B24_CONT_FILE=${SHARED(B24_CONT_FILE,${CHANNEL(linkedid)})})

exten => s,n,Noop(Recording continues to: ${B24_CONT_FILE})

;--------------------------------------------------------------------------------
; Выход
;--------------------------------------------------------------------------------
exten => s,n(exit),Return()

;================================================================================
; КОНЕЦ МОДУЛЯ
;================================================================================
;
; ПРИНЦИП РАБОТЫ:
;
; 1. При ПЕРВОМ вызове sub-record-check для звонка (linkedid=ABC):
;    - УСТАНАВЛИВАЕТСЯ переменная CallMeLINKEDID → AMI получит VarSetEvent
;    - Создается файл: /var/spool/asterisk/continuous/2025/10/26/call-ABC.wav
;    - Запускается MixMonitor с AUDIOHOOK_INHERIT=yes
;    - Помечается: SHARED(B24_CONT_STARTED,ABC)=YES
;
; 2. При Transfer создается новый канал (linkedid=ABC - ТОТ ЖЕ!):
;    - sub-record-check вызывается снова
;    - УСТАНАВЛИВАЕТСЯ CallMeLINKEDID=ABC → CallMe связывает с первым каналом
;    - Видит что SHARED(B24_CONT_STARTED,ABC)=YES
;    - НЕ запускает новый MixMonitor (он уже работает!)
;    - Просто убеждается что AUDIOHOOK_INHERIT=yes
;    - MixMonitor АВТОМАТИЧЕСКИ наследуется и пишет в тот же файл!
;
; 3. Звонок завершается:
;    - MixMonitor останавливается
;    - Файл: call-ABC.wav содержит ВСЮ беседу (без разрывов)
;    - АВТОМАТИЧЕСКИ запускается конвертация:
;      * lame -b 64 call-ABC.wav call-ABC.mp3
;      * rm call-ABC.wav
;    - Результат: остается только call-ABC.mp3
;
; РЕЗУЛЬТАТ:
; 
; Папка monitor/ (существующая):
; /var/spool/asterisk/monitor/2025/10/26/
; ├── in-79991234567-201-20251026-153045-1730036445.123.wav  ← часть 1 (с сотр.201)
; └── in-79991234567-202-20251026-153145-1730036445.456.wav  ← часть 2 (с сотр.202)
;
; Папка continuous/ (НОВАЯ):
; /var/spool/asterisk/continuous/2025/10/26/
; └── call-1730036445.123456.wav  ← ПОЛНАЯ ЗАПИСЬ (201+202 в одном файле!)
;     Сразу после завершения звонка (автоматически):
; └── call-1730036445.123456.mp3  ← файл .wav удален, остался .mp3
;
;================================================================================
;
; ИНТЕГРАЦИЯ С CALLME (v1.4):
;
; Переменная CallMeLINKEDID передается через AMI в виде VarSetEvent:
;
; Event: VarSet
; Channel: SIP/219-0000260c
; Variable: CallMeLINKEDID
; Value: 1761852916.108390
; Uniqueid: 1761852916.108390
;
; CallMe использует эту переменную для:
; - Группировки всех каналов одного звонка по Linkedid
; - Автоматического отслеживания трансферов (новый канал = тот же Linkedid)
; - Гарантированного завершения звонка в Bitrix24 после завершения ВСЕХ каналов
; - Правильного подсчета длительности разговора (от первого ANSWER до последнего Hangup)
;
; ПОДДЕРЖКА:
; - Входящие звонки: CallMeLINKEDID устанавливается для каждого канала
; - Исходящие (Originate): CallMeLINKEDID устанавливается для всех каналов
; - Attended Transfer: Новый канал получает тот же Linkedid → автоматически отслеживается
; - Blind Transfer: Аналогично
; - Call Parking: При снятии с парковки канал получает тот же Linkedid
;
;================================================================================
